def is_safe(board, row, col, n):
    # Check column
    for i in range(row):
        if board[i][col] == 1:
            return False
    # Check upper-left diagonal
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1
    # Check upper-right diagonal
    i, j = row, col
    while i >= 0 and j < n:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1
    return True

def solve_nqueens_util(board, row, n, solutions):
    if row == n:
        # Copy the solution
        solution = []
        for r in board:
            solution.append(r[:])
        solutions.append(solution)
        return
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            solve_nqueens_util(board, row + 1, n, solutions)
            board[row][col] = 0  # Backtrack

def solve_nqueens(n):
    board = [[0] * n for _ in range(n)]
    solutions = []
    solve_nqueens_util(board, 0, n, solutions)
    return solutions

# Example: Solve 4-Queens
if __name__ == "__main__":
    n = 4
    solutions = solve_nqueens(n)
    print(f"Total solutions for {n}-Queens: {len(solutions)}")
    for sol in solutions:
        for row in sol:
            print(row)
        print()
